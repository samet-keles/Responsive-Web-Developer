const gulp = require("gulp");
const { src, dest, series } = require('gulp');
const {watch} = require("gulp");
const browserSync = require("browser-sync").create();
const sass = require("gulp-sass")(require("sass"));
const autoprefixer = require("gulp-autoprefixer");
const reaload = browserSync.reload;
const htmlMinify = require('html-minifier');
const csso = require('gulp-csso');

gulp.task("browser-sync", function () {
  browserSync.init({
    notify: false,
    server: {
      baseDir: "./",
    },
  });
  gulp.watch("./*.html").on("change", browserSync.reload);
  gulp.watch("./scss/**/*.scss", buildStyles);
  gulp.watch("main.css", autoPrefixer);
  gulp.watch("./js/**/*.js").on("change", browserSync.reload);
});

function buildStyles() {
  return gulp
    .src("./scss/main.scss")
    .pipe(sass().on("error", sass.logError))
    .pipe(gulp.dest("./"))
    .pipe(browserSync.stream());
}

function autoPrefixer() {
  return gulp
    .src("main.css")
    .pipe(
      autoprefixer({
        cascade: false,
      })
    )
    .pipe(gulp.dest("dist"));
}

exports.default = series(buildStyles, autoPrefixer, "browser-sync");

// minifiers

function htmlmin() {
  return src('./*.html')
    .on('data', function(file) {
      const buferFile = Buffer.from(htmlMinify.minify(file.contents.toString(), options))
      return file.contents = buferFile
    })
    .pipe(dest('build'))
}

exports.htmlmin = series(htmlmin)

const options = {
  includeAutoGeneratedTags: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  sortClassName: true,
  useShortDoctype: true,
  collapseWhitespace: true
};

gulp.task('cssmin', function () {
    return gulp.src('./dist/main.css')
        .pipe(csso())
        .pipe(gulp.dest('./build'));
});

gulp.task('development', function () {
    return gulp.src('./dist/main.css')
        .pipe(csso({
            restructure: false,
            sourceMap: true,
            debug: true
        }))
        .pipe(gulp.dest('./build'));
});

